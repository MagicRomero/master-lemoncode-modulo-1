@function color-diff($base, $color) {
  $sat: saturation($base) - saturation($color);
  $lig: lightness($base) - lightness($color);
  $fn-sat: if($sat > 0, "desaturate", "saturate");
  $fn-lig: if($lig > 0, "darken", "lighten");

  @return (
    adjust-hue: -
      (
        hue($a) - hue($b),
      ),
    #{$fn-sat}: abs($sat),
    #{$fn-lig}: abs($lig)
  );
}

@function palette-diff($palette) {
  $base: map-get($palette, "base");
  $colors: map-get($palette, "colors");
  $diffs: ();

  @each $color in $colors {
    $diffs: append($diffs, color-diff($base, $color));
  }

  @return $diffs;
}

@function apply-diff($color, $diff) {
  @each $function, $value in $diff {
    $color: call($function, $color, $value);
  }

  @return $color;
}

@function create-palette($base-color) {
  $palette: ();

  @each $diff in $palette-diff {
    $palette: append($palette, apply-diff($base-color, $diff));
  }

  @return $palette;
}

@function palette($base-color) {
  $colors: create-palette($base-color);
  $keys: "lightest" "lighter" "light" "base" "dark" "darker" "darkest";
  $palette: ();

  @for $i from 1 through min(length($colors), length($keys)) {
    $palette: map-merge(
      $palette,
      (
        nth($keys, $i): nth($colors, $i),
      )
    );
  }

  @return $palette;
}

@mixin draw-palette($base-color) {
  $palette: create-palette($base-color);
  $length: length($palette);
  $color-stops: append((), nth($palette, 1), comma);
  $stop-size: 100 / $length;

  @for $i from 1 through $length {
    $color: nth($palette, $i);

    @if $i > 1 {
      $color-stops: append($color-stops, $color $stop-size * ($i - 1) * 1%);
    }

    $color-stops: append($color-stops, $color $stop-size * $i * 1%);
  }

  background: nth($palette, ceil($length / 2));
  background: linear-gradient(to right, $color-stops);
}
